.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_python-blog_intro-to-pyvista.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_python-blog_intro-to-pyvista.py:


Intro to PyVista
----------------

I don't have all that many posts in the gallery yet, so I thought I'd put this
very basic introduction to PyVista in here.

PyVista is 3D mesh analysis and visualizaton library in Python. It is capable
of handle 3D finite difference/volume spatial data structures with arbitrary
geometries. As such, it is capable of representing just about any 3D spatially
referenced data set.

In this brief example, I'm going to load a few example meshes, maybe create
one from scratch, and visualize them in 3D. (at the moment, this is super
basic - I'll get back to updating this later!).

If you really want to learn more about PyVista, head over to its
`gallery <https://docs.pyvista.org/examples/index.html>`_
(I have created many of those examples).



.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2
    import pyvista as pv
    from pyvista import examples

    mesh = examples.download_st_helens()
    mesh






.. only:: builder_html

    .. raw:: html

        <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
        <table>
        <tr><th>UniformGrid</th><th>Information</th></tr>
        <tr><td>N Cells</td><td>151916</td></tr>
        <tr><td>N Points</td><td>152709</td></tr>
        <tr><td>X Bounds</td><td>5.579e+05, 5.677e+05</td></tr>
        <tr><td>Y Bounds</td><td>5.108e+06, 5.122e+06</td></tr>
        <tr><td>Z Bounds</td><td>6.820e+02, 6.820e+02</td></tr>
        <tr><td>Dimensions</td><td>327, 467, 1</td></tr>
        <tr><td>Spacing</td><td>3.000e+01, 3.000e+01, 1.000e+00</td></tr>
        <tr><td>N Arrays</td><td>1</td></tr>
        </table>

        </td><td>
        <table>
        <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
        <tr><td><b>Elevation</b></td><td>Points</td><td>float32</td><td>1</td><td>6.820e+02</td><td>2.543e+03</td></tr>
        </table>

        </td></tr> </table>
        <br />
        <br />


.. code-block:: default

    mesh.plot(cpos='xy')




.. image:: /python-blog/images/sphx_glr_intro-to-pyvista_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(562835.0, 5114981.5, 33641.94828749365), (562835.0, 5114981.5, 682.0), (0.0, 1.0, 0.0)]



Here we can apply a filter to alter the mesh: warp it by a scalar attribute,
elevation in this case:


.. code-block:: default

    topo = mesh.warp_by_scalar()

    p = pv.Plotter()
    p.add_mesh(topo)
    p.show()



.. image:: /python-blog/images/sphx_glr_intro-to-pyvista_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(581977.3046422418, 5134123.804642241, 21436.804642241805), (562835.0, 5114981.5, 2294.5), (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.952 seconds)


.. _sphx_glr_download_python-blog_intro-to-pyvista.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: intro-to-pyvista.py <intro-to-pyvista.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: intro-to-pyvista.ipynb <intro-to-pyvista.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
